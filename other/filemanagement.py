# Import discord
import discord
# Import undocumented part of Discord to use commands
from discord.ext import commands
# Import Sakanya Core
from core import SakanyaCore
# Import aiohttp for asynchronous HTTP requests
import aiohttp
# Import JSON to handle json responses
import json

class FileManagement():
  def __init__(self, bot):
    self.bot = bot

  @commands.command()
  @commands.check(SakanyaCore().is_owner)
  async def emptyRedisKey(self, key=None):
    """
    Empty an entry with the key, or more like, delete a key
    """
    if key is None:
      await self.bot.say('A key name has to be specified.')
      return
    try:
      SakanyaCore().r.delete(key)
    except Exception as e:
      await self.bot.say('Error: ' + repr(e))

  
  @commands.command()
  @commands.check(SakanyaCore().is_owner)
  async def readRedisKey(self, key=None):
    """
    Read an entry with the key.
    """
    try:
      contents = SakanyaCore().r.get(key)
      if len(contents) < 1800:
        await self.bot.say(embed=discord.Embed(
          color = SakanyaCore().embed_color,
          title = 'Key: ' + key,
          type = 'rich',
          description = '```' + contents + '```'
        ))
        return
      async with aiohttp.ClientSession() as session:
        try:
          data = {
              'description': 'Automatically generated by FoxInFlame/Sakanya',
              'public': 'false',
              'files': {}
          }
          data['files'][key.replace('/', '-')] = {
              'content': contents
          }
          response = await session.post(url='https://api.github.com/gists', data=json.dumps(data), headers=SakanyaCore().headers, allow_redirects=False)
          async with response:
            urlresult = json.loads(await response.text())
            if 'url' not in urlresult:
              await self.bot.say(embed=discord.Embed(
                  color=SakanyaCore().embed_color,
                  title='Key: ' + key,
                  type='rich',
                  description=urlresult['message']
              ))
              return
            await self.bot.say(embed=discord.Embed(
                color=SakanyaCore().embed_color,
                title='Key: ' + key,
                type='rich',
                description='Uploaded to:\n[{0}]({1})'.format(
                    urlresult['html_url'], urlresult['html_url'])
            ))
        except Exception as e:
          print(repr(e))
          print('Couldn\'t access github.com.')
          await self.bot.say(embed=discord.Embed(
              color=SakanyaCore().embed_color,
              title='Key: ' + key,
              type='rich',
              description='Could not access api.github.com. Maybe it\'s down?\n{}'.format(
                  repr(e))
          ))
    
    except Exception as e:
      await self.bot.say('Error: ' + str(e))

  @commands.command()
  @commands.check(SakanyaCore().is_owner)
  async def emptyfile(self, filename=None):
    """
    Empty a file
    
    Format:
      >emptyfile [filename]

    Examples:
      >emptyfile nullstory.txt
    """ 
    if filename is None:
      await self.bot.say('A file name has to be specified.')
      return
    try: 
      file = open(filename, 'w', encoding='utf8')
      file.write('')
      file.close()
      await self.bot.say('Emptied file ' + filename)
    except Exception as e:
      await self.bot.say('Error: ' + repr(e))

  @commands.command()
  @commands.check(SakanyaCore().is_owner)
  async def readfile(self, filename=None):
    """
    Read a file
    
    Format:
      >readfile [filename]

    Examples:
      >readfile nullstory.txt
    """
    if filename is None:
      await self.bot.say('A file name has to be specified.')
      return
    try: 
      with open(filename, encoding='utf8') as f:
        contents = f.read()
        if len(contents) < 1800:
          await self.bot.say(embed=discord.Embed(
            color=SakanyaCore().embed_color,
            title = 'File:' + filename,
            type = 'rich',
            description = '```' + contents + '```'
          ))
          return
        # contents = (contents[:1800] + '...') if len(contents) > 1802 else contents
        async with aiohttp.ClientSession() as session:
          try:
            data = {
              'description': 'Automatically generated by FoxInFlame/Sakanya',
              'public': 'false',
              'files': {}
            }
            data['files'][filename.replace('/', '-')] = {
              'content': contents
            }
            response = await session.post(url='https://api.github.com/gists', data=json.dumps(data), headers=SakanyaCore().headers, allow_redirects=False)

            async with response:
              urlresult = json.loads(await response.text())
              if 'url' not in urlresult:
                await self.bot.say(embed=discord.Embed(
                  color = SakanyaCore().embed_color,
                  title = 'File: ' + filename,
                  type = 'rich',
                  description = urlresult['message']
                ))
                return
              await self.bot.say(embed=discord.Embed(
                color = SakanyaCore().embed_color,
                title = 'File: ' + filename,
                type = 'rich',
                description = 'Uploaded to:\n[{0}]({1})'.format(urlresult['html_url'], urlresult['html_url'])
              ))
          except Exception as e:
            print(repr(e))
            print('Couldn\'t access github.com.')
            await self.bot.say(embed=discord.Embed(
              color = SakanyaCore().embed_color,
              title = 'File: ' + filename,
              type = 'rich',
              description = 'Could not access api.github.com. Maybe it\'s down?\n{}'.format(repr(e))
            ))

    except Exception as e:
      await self.bot.say('Error: ' + str(e))
def setup(bot):
  bot.add_cog(FileManagement(bot))
